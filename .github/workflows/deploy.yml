name: Deploy to AWS EKS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: helpdesk-cluster
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd core
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov

      - name: Run tests
        run: |
          cd core
          python manage.py test --settings=config.settings.test
          pytest --cov=apps --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./core/coverage.xml

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Django image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd core
        docker build -t $ECR_REGISTRY/helpdesk-django:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/helpdesk-django:latest .
        docker push $ECR_REGISTRY/helpdesk-django:$IMAGE_TAG
        docker push $ECR_REGISTRY/helpdesk-django:latest

      - name: Build, tag, and push AI service image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd ai-service
        docker build -t $ECR_REGISTRY/helpdesk-ai:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/helpdesk-ai:latest .
        docker push $ECR_REGISTRY/helpdesk-ai:$IMAGE_TAG
        docker push $ECR_REGISTRY/helpdesk-ai:latest

      - name: Build, tag, and push Realtime service image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd realtime-service
        docker build -t $ECR_REGISTRY/helpdesk-realtime:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/helpdesk-realtime:latest .
        docker push $ECR_REGISTRY/helpdesk-realtime:$IMAGE_TAG
        docker push $ECR_REGISTRY/helpdesk-realtime:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Deploy to EKS
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|your-registry/helpdesk-django:latest|${{ env.ECR_REGISTRY }}/helpdesk-django:${{ github.sha }}|g" aws-infrastructure/k8s/*.yaml
        sed -i "s|your-registry/helpdesk-ai:latest|${{ env.ECR_REGISTRY }}/helpdesk-ai:${{ github.sha }}|g" aws-infrastructure/k8s/*.yaml
        sed -i "s|your-registry/helpdesk-realtime:latest|${{ env.ECR_REGISTRY }}/helpdesk-realtime:${{ github.sha }}|g" aws-infrastructure/k8s/*.yaml

        # Apply Kubernetes manifests
        kubectl apply -f aws-infrastructure/k8s/namespace.yaml
        kubectl apply -f aws-infrastructure/k8s/configmap.yaml
        kubectl apply -f aws-infrastructure/k8s/secrets.yaml
        kubectl apply -f aws-infrastructure/k8s/django-deployment.yaml
        kubectl apply -f aws-infrastructure/k8s/ai-service-deployment.yaml
        kubectl apply -f aws-infrastructure/k8s/realtime-service-deployment.yaml
        kubectl apply -f aws-infrastructure/k8s/celery-deployment.yaml
        kubectl apply -f aws-infrastructure/k8s/ingress.yaml

      - name: Wait for deployment
      run: |
        kubectl rollout status deployment/django-app -n helpdesk --timeout=300s
        kubectl rollout status deployment/ai-service -n helpdesk --timeout=300s
        kubectl rollout status deployment/realtime-service -n helpdesk --timeout=300s
        kubectl rollout status deployment/celery-worker -n helpdesk --timeout=300s
        kubectl rollout status deployment/celery-beat -n helpdesk --timeout=300s

      - name: Run database migrations
      run: |
        kubectl exec -n helpdesk deployment/django-app -- python manage.py migrate

      - name: Collect static files
      run: |
        kubectl exec -n helpdesk deployment/django-app -- python manage.py collectstatic --noinput

