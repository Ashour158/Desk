version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgis/postgis:15-3.3
    environment:
      POSTGRES_DB: helpdesk
      POSTGRES_USER: helpdesk_user
      POSTGRES_PASSWORD: helpdesk_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U helpdesk_user -d helpdesk"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Django Application
  web:
    build:
      context: ./core
      dockerfile: Dockerfile
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --worker-class gevent --worker-connections 1000 --max-requests 1000 --max-requests-jitter 50 --timeout 30 --keep-alive 2
    volumes:
      - ./core:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://helpdesk_user:helpdesk_password@db:5432/helpdesk
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Celery Worker
  celery:
    build:
      context: ./core
      dockerfile: Dockerfile
    command: celery -A config worker -l info --concurrency=4 --max-tasks-per-child=1000
    volumes:
      - ./core:/app
      - media_volume:/app/media
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://helpdesk_user:helpdesk_password@db:5432/helpdesk
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./core
      dockerfile: Dockerfile
    command: celery -A config beat -l info
    volumes:
      - ./core:/app
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://helpdesk_user:helpdesk_password@db:5432/helpdesk
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # AI Service (FastAPI)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --workers 2 --worker-class uvicorn.workers.UvicornWorker
    ports:
      - "8001:8001"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Real-time Service (Node.js)
  realtime-service:
    build:
      context: ./realtime-service
      dockerfile: Dockerfile
    command: npm start
    ports:
      - "3000:3000"
    environment:
      - REDIS_URL=redis://redis:6379/2
      - DJANGO_API_URL=http://web:8000
      - NODE_ENV=production
      - UV_THREADPOOL_SIZE=16
    depends_on:
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - web
      - ai-service
      - realtime-service
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: